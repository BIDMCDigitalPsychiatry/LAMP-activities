/**
 * @file   Board.tsx
 * @brief  Board component to load cats and dogs game
 * @date   Mar , 2020
 * @author ZCO Engineer
 * @copyright (c) 2020, ZCO
 */

import { Box } from "./Box";

import { faArrowLeft, faRedo } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

import { Timer } from "../common/Timer";

import { getRandomNumbers } from "../../functions";

import i18n from "./../../i18n";

import * as React from "react";
import "./box.css";
import { InstructionModal } from "./InstructionModal";
import AudioPlayer from "../common/AudioPlayer";
import { Questionnaire } from "./Questionnaire";

const failAudio = "data:audio/mpeg;base64,";


const successAudo = "data:audio/mpeg;base64,";




export interface BoardProps {
  language: string;
  time: number;
  noBack: boolean;
}

interface BoardState {
  animate: boolean;
  boxClass: Array<string>;
  boxes: any,
  dogCount: number;
  enableTap: boolean;
  endTime: any;
  gameOver: boolean;
  gameState: number;
  lastClickTime: any;
  randomPoints: Array<number>;
  startTime: any;
  startTimer: number;
  timeout: boolean;
  showModalInfo: boolean;
  successTaps: number;
  stateSuccessTaps: number;
  stateWrongTaps: number;
  states: any;
  status: any;
  wrongTaps: number;
  sendResponse: boolean;
  showInstruction: boolean;
  successCompletion: boolean;
  boxCount: number
  numbers: string[]
  tapTime: number,
  questionCount: number
  tapType: number,
  qModel: boolean,
  responses: any,
  lastTapTime: number,
  outComes: number[]
  levels: number[]
}

const numbers = [
  "first",
  "second",
  "third",
  "fourth",
  "fifth",
  "sixth",
  "seventh",
  "eightth",
  "nineth",
  "tenth",
  'eleventh',
  'twelth',
  // 'thirteenth',
  // 'fourteenth',
  // 'fifteenth',
  // 'sixteenth',
  // 'seventeenth',
  // 'eighteenth'
];

// const numbersSmall = [
//   "first",
//   "second",
//   "third",
//   "fourth",
//   "fifth",
//   "sixth",
//   "seventh",
//   "eightth",
//   "nineth",
//   "tenth",
//   'eleventh',
//   'twelth',
// ];
class Board extends React.Component<BoardProps, BoardState> {
  private timer: any;

  constructor(props: BoardProps) {
    super(props);
    i18n.changeLanguage(!props.language ? "en-US" : props.language);
    // Initailise state values
    const timerValue = 120
    this.state = {
      animate: false,
      boxClass: ["box-square"],
      boxes: null,
      dogCount: 0,
      numbers: this.shuffleArray(numbers),
      enableTap: false,
      endTime: null,
      gameOver: false,
      gameState: 0,
      lastClickTime: null,
      randomPoints: [],
      sendResponse: false,
      showModalInfo: true,
      startTime: null,
      startTimer: timerValue,
      stateSuccessTaps: 0,
      stateWrongTaps: 0,
      states: null,
      status: null,
      successTaps: 0,
      timeout: false,
      wrongTaps: 0,
      showInstruction: true,
      successCompletion: true,
      boxCount: 2,
      tapTime: 0,
      lastTapTime: 0,
      questionCount: 0,
      tapType: -1,
      qModel: false,
      responses: {},
      outComes: [],
      levels: []
    };
  }
  // Reset game state for each state
  resetState = () => {
    if(this.state.startTimer <= 6) {
      this.finishGame()
    } else {

    // var refreshIntervalId: any = undefined
    // if ((new Date().getTime() - this.state.tapTime) > 4000 && (new Date().getTime() - this.state.lastClickTime) > 4000 && this.state.startTimer != 0) {
    let dogTempCount =  this.state.successCompletion ? this.state.dogCount + 1 : (this.state.dogCount > 1 ? this.state.dogCount - 1 : 1)
    let boxCount = 4
    if(dogTempCount > 9) dogTempCount = 9
    switch (dogTempCount) {
      case 1:
        boxCount = 4;
        break;
      case 2:
      case 3:      
        boxCount = 6;
        break;
      case 4:
      case 5:
        boxCount = 8;
        break;
      case 6:
      case 7:
        boxCount = 10
        break;
      case 8:
      case 9:
        boxCount = 12
        break;
    }

      const rP = getRandomNumbers(dogTempCount, 1, boxCount);
      this.setState({
        animate: true,
        boxClass: ["box-square"],
        dogCount: dogTempCount,
        enableTap: false,
        lastClickTime: new Date().getTime(),
        randomPoints: rP,
        showModalInfo: false,
        startTime: this.state.gameState === 1 ? new Date() : this.state.startTime,
        successTaps: 0,
        wrongTaps: 0,
        boxCount: boxCount,
        questionCount: this.state.questionCount + rP.length,
        numbers: this.shuffleArray(numbers),
      });
      setTimeout(() => {
        this.setState({
          animate: false,
          enableTap: false,
        })
        setTimeout(() => {
          this.setState({
            animate: true,
            tapTime: new Date().getTime(),
            enableTap: true
          }, () => {
            setTimeout(() => {
              if ((new Date().getTime() - this.state.tapTime) > 4000 && (new Date().getTime() - this.state.lastClickTime) > 4000 && this.state.startTimer != 0) {
                this.resetBoxClass();
                this.resetState()
              }
            }, 4000)
          })
        }, 1000);
      }, 500)
      this.checkStatus();
    // }
    }
  };
  // Rest box styles after each load
  resetBoxClass = () => {
    // if ((new Date().getTime() - this.state.tapTime) > 4000 && (new Date().getTime() - this.state.lastClickTime) > 4000 && this.state.startTimer != 0) {
    Array.from(document.getElementsByClassName("box-square")).forEach(
      (elem) => {
        elem.className = "box-square dog-cover";
      }
    );
    // }
  };

  // Check the status of intervals for loading dogs and cats
  checkStatus = () => {
    if ((this.state.gameOver || this.state.timeout) && ((new Date().getTime() - this.state.tapTime) > 4000 && (new Date().getTime() - this.state.lastClickTime) > 4000)) {
      clearInterval(this.timer!);
      this.setState({
        dogCount: 0,
        enableTap: false,
      });
    }
  };

  // Each box click is handled here
  handleClick = (e: any, i: number) => {
    let success = this.state.randomPoints.indexOf(i) > -1 ? true : false;
    const item = e.target?.className?.indexOf("box-square") > -1 ? e.target : (
      e.target?.className?.indexOf("dog") > -1 ?
        e.target?.parentNode?.children[0] : e.target?.children[0])
    if (item.className !== "box-square green-box-square" && item.className !== "box-square red-box-square") {
      item.className = success
        ? "box-square green-box-square"
        : "box-square red-box-square";
      this.setState({
        stateSuccessTaps: success
          ? this.state.stateSuccessTaps + 1
          : this.state.stateSuccessTaps,
        stateWrongTaps: !success
          ? this.state.stateWrongTaps + 1
          : this.state.stateWrongTaps,
        successTaps: success
          ? this.state.successTaps + 1
          : this.state.successTaps,
        wrongTaps: success ? this.state.wrongTaps : this.state.wrongTaps + 1,
        tapType: success ? 1 : 2
      }, () => {
        this.updateWithTaps(i, success)

        setTimeout(() => {
          this.setState({ tapType: -1 })
        }, 250)

      });
    }
  };

  finishGame = () => {
    this.setState({
      endTime: new Date(),
      timeout: true,
    }, () => {
      this.updateStateWithTaps();
      this.sendGameResult();
    });
  }

  // To track the timer expiring
  passTimerUpdate = (timerValue: number) => {

    if (timerValue === 0) {
      if ((new Date().getTime() - this.state.tapTime) > 4000 && (new Date().getTime() - this.state.lastClickTime) > 4000) {
        this.finishGame()
      }
      else {
        setInterval(() => {
          this.passTimerUpdate(0)
        }, 1000)
      }
    }
    if (timerValue >= 0 && timerValue !== this.state.startTimer) {
      this.setState({
        startTimer: timerValue,
      });
    }
  };


  // Update the state values after each game state
  updateStateWithTaps = () => {
    const states = [];
    const dif = new Date().getTime() - this.state.lastClickTime;
    const lastclickTime = dif / 1000;
    if (this.state.states !== null) {
      const r = JSON.parse(this.state.states);
      Object.keys(r).forEach((key) => {
        states.push(r[key]);
      });
    }
    const box = JSON.parse(this.state.boxes);
    states.push(box);
    const status = []
    if (this.state.status !== null) {
      const r = JSON.parse(this.state.status);
      Object.keys(r).forEach((key) => {
        status.push(r[key]);
      });
    }
    const route = {
      CorrectAnswer: this.state.stateSuccessTaps,
      TimeTaken: lastclickTime.toFixed(2),
      WrongAnswer: this.state.stateWrongTaps,
    };
    status.push(route);

    this.setState({
      lastClickTime: new Date().getTime(),
      states: JSON.stringify(states),
      status: JSON.stringify(status)
    });
  };

  // Update the state values after each game state
  updateWithTaps = (boxNo: number, statusVal: boolean) => {
    const boxes = [];
    const lastclickTime = new Date().getTime() - this.state.lastClickTime;
    if (this.state.boxes !== null) {
      const r = JSON.parse(this.state.boxes);
      Object.keys(r).forEach((key) => {
        boxes.push(r[key]);
      });
    }
    if (this.state.enableTap) {
      const route = {
        duration: lastclickTime,
        item: boxNo,
        level: this.state.gameState,
        type: statusVal,
        value: null,
      };
      boxes.push(route);
    }
    this.setState({
      boxes: JSON.stringify(boxes),
      lastClickTime: new Date().getTime(),
    }, () => {
      let statusOutComes = this.state.outComes
      !statusVal ? statusOutComes.push(0) : statusOutComes.push(1)
      let levels = this.state.levels
      levels.push(this.state.randomPoints.length)
      if (!statusVal || (this.state.successTaps === this.state.randomPoints.length)) {
        this.setState({
          successCompletion: this.state.successTaps === this.state.randomPoints.length,
          outComes: statusOutComes,
          levels: levels
        },
          () => {
            setTimeout(() => {
              this.resetBoxClass();
              this.resetState()
            }, 500)
          })
      } else {
        setTimeout(() => {
          if ((new Date().getTime() - this.state.tapTime) > 4000 && (new Date().getTime() - this.state.lastClickTime) > 4000 && this.state.startTimer != 0) {
            this.setState({
              successCompletion: this.state.successTaps === this.state.randomPoints.length,
              outComes: statusOutComes,
              levels: levels
            }, () => {
              this.resetBoxClass();
              this.resetState()
            })
          }
        }, 4000)
      }
    });
  };

  // Call the API to pass game result
  sendGameResult = (status?: boolean) => {
    const route = { 'type': 'manual_exit', 'value': status ?? false }
    const boxes = [];
    let manul = false
    if (this.state.boxes !== null) {
      const r = JSON.parse(this.state.boxes);
      Object.keys(r).forEach((key) => {
        if (r[key].type == "manual_exit") manul = true
        boxes.push(r[key]);
      });
    }
    if (!manul) boxes.push(route);
    this.setState({
      boxes: JSON.stringify(boxes),
    }, () => {
      this.setState({ qModel: true })
    });
  };

  // To refresh the game
  clickHome = () => {
    window.location.reload();
  };

  clickBack = () => {
    this.sendGameResult(true)
  }

  handleCloseInstructionModal = () => {
    this.setState({
      showInstruction: false,
      showModalInfo: false,
      lastClickTime: new Date().getTime(),
    });
    this.resetState();
  };

  shuffleArray(array: string[]) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  submitResponse = (response: any) => {
    this.setState({ responses: response }, () => {

      const range = (start: number, stop: number, step: number) => Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + (i * step));
      const theta = range(0, 10, 0.1)
      const k = 2.00
      const actualScore = this.state.outComes.reduce((a, b) => a + b, 0)

      // item response theory computation (no partial credit)
      //MLE approach: find maximum likelihood ability theta, given the round outcomes
      let irf = 0.00;
      let expectedScores = Array(theta.length).fill(0)
      //expectedScores[j] = expected score (# correct) of a person with true ability theta[j] 
      for (let i = 0; i < this.state.outComes.length; i++) {
        for (let j = 0; j < theta.length; j++) {
          irf = Math.exp(k * (theta[j] - this.state.levels[i])) /
            (1 + Math.exp(k * (theta[j] - this.state.levels[i])))
          //= probability of getting an item of difficulty b[i] correct at an ability level of theta[j]
          expectedScores[j] += irf
        }
      }
      let deviations = expectedScores.map(function (value) { return Math.abs(value - actualScore) })
      let index = deviations.indexOf(Math.min(...deviations))
      let score = Math.round(theta[index] * 10) / 10
      const gameScore = score;
      let points = 0;
      if (gameScore === 100) {
        points = points + 2;
      } else {
        points = points + 1;
      }
      parent.postMessage(
        JSON.stringify({
          duration: new Date().getTime() - this.props.time,
          static_data: {
            correct_answers: this.state.stateSuccessTaps,
            point: points,
            score: gameScore,
            total_questions: this.state.questionCount,
            wrong_answers: this.state.stateWrongTaps,
          },
          temporal_slices: JSON.parse(this.state.boxes),
          timestamp: new Date().getTime(),
        }),
        "*"
      );
      this.setState({
        sendResponse: true,
      });
    });
  }
  // Render the game board
  render() {
    let boxes;
    // if ((/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i.test(
    //   navigator.userAgent
    // ) && this.state.boxCount >= 12) || !(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i).test(
    //   navigator.userAgent
    // ) && this.state.boxCount >= 20) {
    //   boxes = i18n.t("GAME_OVER") + " !!!";
    // } else 
    if (this.state.boxCount >= 4) {

      boxes = [];
      let classn = "";
      let dogBoxFlag = false;
      let j = 0;

      for (let i = 1; i <= this.state.boxCount; i++) {
        dogBoxFlag = false;
        // Image to be loaded behind the box
        if (this.state.randomPoints.includes(i)) {
          dogBoxFlag =
            this.state.dogCount > 0 && j < this.state.dogCount ? true : false;
          if (dogBoxFlag) {
            j++;
          }
        }
        const boxClass = "box-square";
        classn = "box " + this.state.numbers[i - 1];
        const img =
          dogBoxFlag === true ? "dog" : "";

        // To find the whether to enable or disable box tapping

        boxes.push(
          <div>
            <Box
              index={i}
              onClick={this.handleClick}
              boxClass={classn}
              img={img}
              enableTap={this.state.enableTap &&
                this.state.successTaps + this.state.wrongTaps <
                this.state.randomPoints.length}
              animateStatus={this.state.animate}
              boxSQClass={boxClass}
            />
          </div>
        );
      }
    }
    // Timer to be shown or not
    const timer =
      !this.state.timeout &&
        !this.state.gameOver && !this.state.showInstruction ? (
        <Timer
          passTimerUpdate={this.passTimerUpdate}
          startTimeInSeconds={this.state.startTimer}
          startTimer={true}
        />
      ) : null;


    const instructionModal = this.state.showInstruction ? (
      <InstructionModal
        show={true}
        modalClose={this.handleCloseInstructionModal}
        msg={`${i18n.t("Pay attention to where the dogs were on the screen. When the squares turn blue, tap where the dogs were.")}`}
        language={i18n.language}
      />
    ) : null;

    const audio = this.state.tapType == 2 ? <AudioPlayer sound={failAudio} /> :
      this.state.tapType == 1 ? <AudioPlayer sound={successAudo} /> : null


    return (
      <div>
        {!!this.state.qModel && <Questionnaire setResponse={this.submitResponse} />}
        {!this.props.noBack && <nav className="back-link">
          <FontAwesomeIcon icon={faArrowLeft} onClick={this.clickBack} />
        </nav>}
        <nav className="home-link">
          <FontAwesomeIcon icon={faRedo} onClick={this.clickHome} />
        </nav>
        <div className="heading">{i18n.t("D-Cog")}</div>
        <div className="game-board">
          <div>
            <div className="timer-div">{timer}</div>
            <div className="mt-30">{boxes}</div>
          </div>
          {audio}
          {instructionModal}
        </div>
      </div>
    );
  }
}

export default Board;
